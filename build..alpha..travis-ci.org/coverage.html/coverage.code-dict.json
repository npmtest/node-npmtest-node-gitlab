{"/home/travis/build/npmtest/node-npmtest-node-gitlab/test.js":"/* istanbul instrument in package npmtest_node_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/lib.npmtest_node_gitlab.js":"/* istanbul instrument in package npmtest_node_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_gitlab = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_gitlab = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-gitlab && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_gitlab\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_gitlab.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_gitlab.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_gitlab.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_gitlab.__dirname +\n                    '/lib.npmtest_node_gitlab.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/index.js":"module.exports = require('./lib/gitlab');","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/gitlab.js":"/**!\n * gitlab - lib/gitlab.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('gitlab');\nvar RESTFulClient = require('restful-client').RESTFulClient;\nvar util = require('util');\nvar resources = require('./resources');\n\nmodule.exports = Gitlab;\n\n/**\n * Create a gitlab API client.\n *\n * @param {Object} options\n *  - {String} api, api root url, e.g.: 'http://gitlab.com/api/v3'\n *  - {String} privateToken, You can find or reset your private token in your profile.\n */\nfunction Gitlab(options) {\n  options = options || {};\n  options.api = options.api || 'https://gitlab.com/api/v3';\n  RESTFulClient.call(this, options);\n  this.privateToken = options.privateToken;\n\n  this.addResources(resources);\n\n  // mergeRequests => merge_requests\n  this.merge_requests = this.mergeRequests;\n  // members => projectMembers\n  this.members = this.projectMembers;\n}\n\nutil.inherits(Gitlab, RESTFulClient);\n\nGitlab.prototype.setAuthentication = function (req) {\n  req.params.data.private_token = req.params.data.private_token || this.privateToken;\n  return req;\n};\n\nGitlab.create = function (options) {\n  return new Gitlab(options);\n};\n\nGitlab.createPromise = function (options) {\n  var client = Gitlab.create(options);\n  return require('./promisify')(client);\n};\n\nGitlab.createThunk = function (options) {\n  var client = Gitlab.create(options);\n  return require('./thunkify')(client);\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/index.js":"/**!\n * gitlab - lib/resources/index.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nmodule.exports = {\n  projects: require('./project'),\n\n  projectMembers: {\n    resourcePath: '/projects/:id/members',\n    idName: 'user_id',\n  },\n\n  repository: require('./repository'),\n\n  repositoryBranches: require('./repository_branch'),\n\n  repositoryFiles: {\n    resourcePath: '/projects/:id/repository/files'\n  },\n\n  mergeRequests: require('./merge_request'),\n\n  users: {\n    resourcePath: '/users',\n    idName: 'user_id'\n  },\n\n  issues: require('./issue'),\n\n  globalHooks: {\n    resourcePath: '/hooks',\n    idName: 'hook_id'\n  },\n\n  milestones: require('./milestone'),\n\n  hooks: {\n    resourcePath: '/projects/:id/hooks',\n    idName: 'hook_id',\n  },\n\n  groups: require('./group'),\n\n  groupMembers: {\n    resourcePath: '/groups/:id/members',\n    idName: 'user_id',\n  },\n\n  deployKeys: {\n    resourcePath: '/projects/:id/keys',\n    idName: 'key_id',\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/project.js":"/**!\n * gitlab - lib/resources/project.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar restful = require('restful-client');\n\nmodule.exports = Project;\n\nfunction Project(client) {\n  this.constructor.super_.call(this, client, '/projects', 'id');\n}\nutil.inherits(Project, restful.RESTFulResource);\n\n/**\n * Get Project info by path.\n *\n * /api/v3/project?private_token=xxx&&path=fengmk2/fawave\n *\n * @param {Object} params\n *  - {String} path\n * @param {Function(err, project)} callback\n */\nProject.prototype.getByPath = function (params, callback) {\n  this.client.request('get', '/project', params, callback);\n};\n\nProject.prototype.search = function (params, callback) {\n  this.client.request('get', '/projects/search/:query', params, callback);\n};\n\nProject.prototype.fork = function (params, callback) {\n  this.client.request('post', '/projects/fork/:id', params, callback);\n};\n\nProject.prototype.listEvents = function (params, callback) {\n  this.client.request('get', this.onePath + '/events', params, callback);\n};\n\nProject.prototype.getLabels = function (params, callback) {\n  this.client.request('get', this.onePath + '/labels', params, callback);\n};\n\nProject.prototype.createLabel = function (params, callback) {\n  this.client.request('post', this.onePath + '/labels', params, callback);\n};\n\nProject.prototype.updateLabel = function(params, callback) {\n  this.client.request('put', this.onePath + '/labels', params, callback);\n};\n\nProject.prototype.deleteLabel = function(params, callback) {\n  this.client.request('delete', this.onePath + '/labels', params, callback);\n};","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/repository.js":"/**!\n * gitlab - lib/resources/repository.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar restful = require('restful-client');\n\nmodule.exports = Repository;\n\nfunction Repository(client) {\n  this.constructor.super_.call(this, client, '/projects/:id/repository/:type', 'branch');\n}\nutil.inherits(Repository, restful.RESTFulResource);\n\n/**\n * Get a list of repository branches from a project, sorted by name alphabetically.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n * @param {Function} callback\n */\nRepository.prototype.getBranches = function (params, callback) {\n  params.type = 'branches';\n  this.list(params, callback);\n};\n\n/**\n * Protects a single project repository branch.\n * This is an idempotent function, protecting an already protected repository branch\n * still returns a 200 Ok status code.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} branch The name of the branch\n * @param {Function} callback\n */\nRepository.prototype.protectBranch = function (params, callback) {\n  params.type = 'branches';\n  this.client.request('PUT', this.path + '/:branch/protect', params, callback);\n};\n\n/**\n * Unprotects a single project repository branch.\n * This is an idempotent function, unprotecting an already unprotected repository branch\n * still returns a 200 Ok status code.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} branch The name of the branch\n * @param {Function} callback\n */\nRepository.prototype.unprotectBranch = function (params, callback) {\n  params.type = 'branches';\n  this.client.request('PUT', this.path + '/:branch/unprotect', params, callback);\n};\n\n/**\n * Get a single project repository branch.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} branch The name of the branch\n * @param {Function} callback\n */\nRepository.prototype.getBranch = function (params, callback) {\n  params.type = 'branches';\n  this.client.request('get', this.path + '/:branch', params, callback);\n};\n\n/**\n * Get a list of repository tags from a project, sorted by name in reverse alphabetical order.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n * @param {Function} callback\n */\nRepository.prototype.getTags = function (params, callback) {\n  params.type = 'tags';\n  this.list(params, callback);\n};\n\n/**\n * Get a list of repository commits in a project.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} [ref_name] The name of a repository branch or tag or if not given the default branch\n * @param {Function} callback\n */\nRepository.prototype.getCommits = function (params, callback) {\n  params.type = 'commits';\n  this.list(params, callback);\n};\n\n/**\n * Get a list of repository files and directories in a project.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} [path] The path inside repository, default is '/'. Used to get contend of subdirectories. e.g.: `test`\n *  - {String} [ref_name] The name of a repository branch or tag or if not given the default branch\n * @param {Function} callback\n */\nRepository.prototype.getTree = function (params, callback) {\n  params.type = 'tree';\n  this.list(params, callback);\n};\n\n/**\n * Get the raw file contents for a file.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} sha The commit or branch name\n *  - {String} filepath The path the file\n * @param {Function} callback\n */\nRepository.prototype.getBlob = function (params, callback) {\n  params.type = 'commits';\n  params.contentType = 'buffer';\n  this.client.request('get', this.path + '/:sha/blob', params, callback);\n};\n\n/**\n * Get the raw file contents for a blob by blob sha.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} sha The blob sha\n * @param {Function} callback\n */\nRepository.prototype.getRawBlob = function (params, callback) {\n  params.type = 'raw_blobs';\n  params.contentType = 'buffer';\n  this.client.request('get', this.path + '/:sha', params, callback);\n};\n\n/**\n * Creates a new tag in the repository that points to the supplied ref.\n *\n * @param {Object} params\n *  - {String} id (required) - The ID of a project\n *  - {String} tag_name (required) - The name of a tag\n *  - {String} ref (required) - Create tag using commit SHA, another tag name, or branch name.\n *  - {String} message (optional) - Creates annotated tag.\n *  - {String} release_description (optional) - Add release notes to the git tag and store it in the GitLab database.\n * @param {Function} callback\n */\n\nRepository.prototype.createTag = function (params, callback) {\n  params.type = 'tags';\n  this.client.request('POST', this.path, params, callback);\n};\n\n\n/**\n * Get the archive for a repo by commit sha.\n *\n * @param {Object} params\n *  - {String} id The ID of a project\n *  - {String} sha The repo sha\n * @param {Function} callback\n */\nRepository.prototype.archive = function (params, callback) {\n  params.type = 'archive';\n  params.contentType = 'buffer';\n  this.client.request('get', this.path, params, callback);\n};\n\n/**\n * Compare branches, tags or commits.\n *\n * @param {Object} params\n *  - {String} id (required) The ID of a project\n *  - {String} from (required) - the commit SHA or branch name\n *  - {String} to (required) - the commit SHA or branch name\n * @param {Function} callback\n */\nRepository.prototype.compare = function (params, callback) {\n  params.type = 'compare';\n  this.client.request('get', this.path, params, callback);\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/repository_branch.js":"/**!\n * gitlab - lib/resources/repository_branch.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar restful = require('restful-client');\n\nmodule.exports = RepositoryBranch;\n\nfunction RepositoryBranch(client) {\n  this.constructor.super_.call(this, client, '/projects/:id/repository/branches', 'branch');\n}\nutil.inherits(RepositoryBranch, restful.RESTFulResource);\n\nRepositoryBranch.prototype.protect = function (params, callback) {\n  this.client.request('put', this.this.onePath + '/protect', params, callback);\n  return this;\n};\n\nRepositoryBranch.prototype.unprotect = function (params, callback) {\n  this.client.request('put', this.this.onePath + '/unprotect', params, callback);\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/merge_request.js":"'use strict';\n\nvar util = require('util');\nvar RESTFulResource = require('restful-client').RESTFulResource;\n\nmodule.exports = MergeRequest;\n\nfunction MergeRequest(client) {\n  this.constructor.super_.call(this, client, '/projects/:id/merge_requests', 'merge_request_id');\n}\nutil.inherits(MergeRequest, RESTFulResource);\n\nMergeRequest.prototype.listNotes = function (params, callback) {\n  this.client.request('get', this.onePath + '/notes', params, callback);\n};\n\nMergeRequest.prototype.createNote = function (params, callback) {\n  this.client.request('post', this.onePath + '/notes', params, callback);\n};\n\nMergeRequest.prototype.getNote = function (params, callback) {\n  this.client.request('get', this.onePath + '/notes/:note_id', params, callback);\n};\n\nMergeRequest.prototype.updateNote = function (params, callback) {\n  this.client.request('put', this.onePath + '/notes/:note_id', params, callback);\n};\n\nMergeRequest.prototype.merge = function (params, callback) {\n  this.client.request('put', this.onePath + '/merge', params, callback);\n};\n\nMergeRequest.prototype.listCommits = function (params, callback) {\n  this.client.request('get', this.onePath + '/commits', params, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/issue.js":"/**!\n * gitlab - lib/resources/issue.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar RESTFulResource = require('restful-client').RESTFulResource;\n\nmodule.exports = Issue;\n\nfunction Issue(client) {\n  this.constructor.super_.call(this, client, '/projects/:id/issues', 'issue_id');\n}\nutil.inherits(Issue, RESTFulResource);\n\nIssue.prototype.listNotes = function (params, callback) {\n  this.client.request('get', this.onePath + '/notes', params, callback);\n};\n\nIssue.prototype.createNote = function (params, callback) {\n  this.client.request('post', this.onePath + '/notes', params, callback);\n};\n\nIssue.prototype.getNote = function (params, callback) {\n  this.client.request('get', this.onePath + '/notes/:note_id', params, callback);\n};\n\nIssue.prototype.updateNote = function (params, callback) {\n  this.client.request('put', this.onePath + '/notes/:note_id', params, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/milestone.js":"/**!\n * gitlab - lib/resources/milestone.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar restful = require('restful-client');\n\nmodule.exports = Milestone;\n\nfunction Milestone(client) {\n  this.constructor.super_.call(this, client, '/projects/:id/milestones', 'milestone_id');\n}\nutil.inherits(Milestone, restful.RESTFulResource);\n\nMilestone.prototype.listIssues = function (params, callback) {\n  this.client.request('get', this.onePath + '/issues', params, callback);\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/resources/group.js":"/**!\n * gitlab - lib/resources/group.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar restful = require('restful-client');\n\nmodule.exports = Group;\n\nfunction Group(client) {\n  this.constructor.super_.call(this, client, '/groups', 'id');\n}\nutil.inherits(Group, restful.RESTFulResource);\n\n/**\n * Transfer a project to the Group namespace. Available only for admin\n *\n * POST  /groups/:id/projects/:project_id\n *\n * @param {Object} params\n *  - {String} id group id\n *  - {String} project_id project id\n * @param {Function(err, project)} callback\n */\nGroup.prototype.transferProject = function (params, callback) {\n  this.client.request('post', '/groups/:id/projects/:project_id', params, callback);\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/promisify.js":"/**!\n * gitlab - lib/promisify.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/* jshint ignore:start */\nvar Promise = require('any-promise');\n/* jshint ignore:end */\nvar properties = require('./properties');\n\nmodule.exports = promisifyAll;\n\nfunction promisifyAll(source) {\n  var target = {\n    request: promisify('request', source.request.bind(source))\n  };\n  Object.keys(properties).forEach(function (name) {\n    var methods = properties[name];\n    target[name] = {};\n    methods.forEach(function (method) {\n      target[name][method] = promisify(method, source[name][method].bind(source[name]));\n    });\n  });\n  return target;\n}\n\nfunction promisify(name, fn) {\n  /* jshint evil:true */\n  return eval('(function ' + name + '() {\\n'\n    + '  var len = arguments.length;\\n'\n    + '  var args = new Array(len + 1);\\n'\n    + '  for (var i = 0; i < len; ++i) { args[i] = arguments[i]; }\\n'\n    + '  var lastIndex = i;\\n'\n    + '  return new Promise(function (resolve, reject) {\\n'\n    + '    args[lastIndex] = makeCallback(resolve, reject);\\n'\n    + '    fn.apply(null, args);\\n'\n    + '  });\\n'\n    + '});');\n}\n\nfunction makeCallback(resolve, reject) {\n  return function (err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/properties.js":"/**!\n * gitlab - lib/properties.js\n *\n * Copyright(c) repo-utils and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar defaultMethods = ['get', 'list', 'create', 'update', 'remove'];\n\nvar properties = {\n  milestones: [\n    'listIssues',\n  ],\n  members: [],\n  hooks: [],\n  globalHooks: [],\n  users: [],\n  mergeRequests: [\n    'listNotes',\n    'createNote',\n    'getNote',\n    'updateNote',\n    'merge'\n  ],\n  repositoryFiles: [],\n  repositoryBranches: [\n    'protect',\n    'unprotect',\n  ],\n  repository: [\n    'getBranches',\n    'protectBranch',\n    'unprotectBranch',\n    'getBranch',\n    'getTags',\n    'getCommits',\n    'getTree',\n    'getBlob',\n    'archive',\n    'compare'\n  ],\n  issues: [\n    'listNotes',\n    'createNote',\n    'getNote',\n    'updateNote'\n  ],\n  projects: [\n    'getByPath',\n    'listEvents',\n    'fork',\n    'search',\n  ],\n  deployKeys: [],\n  projectMembers: [],\n  groups: [\n    'transferProject'\n  ],\n  groupMembers: [],\n};\n\nfor (var key in properties) {\n  var methods = properties[key];\n  properties[key] = defaultMethods.concat(methods);\n}\n\nmodule.exports = properties;\n","/home/travis/build/npmtest/node-npmtest-node-gitlab/node_modules/node-gitlab/lib/thunkify.js":"/**!\n * gitlab - lib/thunkify.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar thunkify = require('thunkify-wrap');\nvar properties = require('./properties');\n\nmodule.exports = function (client) {\n  thunkify(client, 'request');\n  for (var key in properties) {\n    var methods = properties[key];\n    thunkify(client[key], methods);\n  }\n  return client;\n};\n"}